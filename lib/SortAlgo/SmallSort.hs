-- | Specialized sorting algorithms for small array sizes.
--
-- The specialized sorts defined here are based on optimal sorting networks
-- generated by <http://pages.ripco.net/~jgamble/nw.html>.

module SortAlgo.SmallSort(smallSort) where

import qualified SortAlgo.Algo as SA
import           SortAlgo.Algo (Idx, Sorter)


sort2 :: Idx -> Idx -> Sorter ()
sort2 i0 i1 = SA.sort2 i0 i1 >> return ()

sort3 :: Idx -> Idx -> Idx -> Sorter ()
sort3 i0 i1 i2 = do
    sort2 i0 i1
    sort2 i0 i2
    sort2 i1 i2

sort4 :: Idx -> Idx -> Idx -> Idx -> Sorter ()
sort4 i0 i1 i2 i3 = do
    sort2 i0 i1
    sort2 i2 i3
    sort2 i0 i2
    sort2 i1 i3
    sort2 i1 i2

sort5 :: Idx -> Idx -> Idx -> Idx -> Idx -> Sorter ()
sort5 i0 i1 i2 i3 i4 = do
    sort2 i0 i1
    sort2 i3 i4
    sort2 i2 i4
    sort2 i2 i3
    sort2 i0 i3
    sort2 i0 i2
    sort2 i1 i4
    sort2 i1 i3
    sort2 i1 i2

sort6 :: Idx -> Idx -> Idx -> Idx -> Idx -> Idx -> Sorter ()
sort6 i0 i1 i2 i3 i4 i5 = do
    sort3 i0 i1 i2
    sort3 i3 i4 i5
    sort2 i0 i3
    sort2 i1 i4
    sort2 i2 i5
    sort2 i1 i3
    sort2 i2 i4
    sort2 i2 i3

-- | Specialized sort for array sizes <= 6.
--
-- Not capable of processing any bigger sizes, be careful when `fix`ing it.
smallSort :: SA.OpenSortAlgo
smallSort rec i end =
    case SA.rangeSize i end of
        0 -> return ()
        1 -> return ()
        2 -> sort2 (i+0) (i+1)
        3 -> sort3 (i+0) (i+1) (i+2)
        4 -> sort4 (i+0) (i+1) (i+2) (i+3)
        5 -> sort5 (i+0) (i+1) (i+2) (i+3) (i+4)
        6 -> sort6 (i+0) (i+1) (i+2) (i+3) (i+4) (i+5)
        _ -> rec i end
